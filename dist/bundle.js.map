{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/board.js","webpack:///./lib/carrotcrush.js","webpack:///./lib/empty_space.js","webpack:///./lib/fruit.js","webpack:///./lib/game.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;AClFA;AACA;;;AAGA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;;;AAGA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,yBAAyB;AAC5C,qBAAqB,sBAAsB;AAC3C;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC,2CAA2C,OAAO;;AAElD;;AAEA;AACA,6BAA6B,QAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC,qBAAqB,OAAO;AAC5B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,WAAW;AAC1C;AACA;;AAEA;AACA,kBAAkB,sBAAsB;AACxC,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACrQA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;ACPD;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACnCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACvIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,eAAe;AAC5C;;;AAGA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;;;AAG9C;AACA,wBAAwB,iBAAiB,EAAE;AAC3C,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/carrotcrush.js\");\n","import Fruit from './fruit';\nimport EmptySpace from './empty_space';\n\n\nclass Board {\n  constructor(ctx) {\n    this.grid = new Array(6);\n    for (let i = 0; i < this.grid.length; i ++) {\n      this.grid[i] = (new Array(11))\n    }\n    this.score = 0;\n    this.ctx = ctx;\n    this.draw = this.draw.bind(this);\n    this.falling = [];\n    this.populate();\n  }\n\n  populate() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j < this.grid[i].length; j++) {\n        let pos = [i, j]\n        this.grid[i][j] = new Fruit([i, j], false);\n      }\n    }\n\n    this.findAndRemoveStreaks();\n  }\n\n  isValidMove(fromMove, toMove) {\n    const col1 = fromMove[0];\n    const col2 = toMove[0];\n    const row1 = fromMove[1];\n    const row2 = toMove[1];\n    const lastCol = (this.grid.length - 1);\n    const lastRow = (this.grid[0].length - 1);\n    if ((col1 === 0) && (col2 !== 0 && col2 !== 1)) {\n      return false;\n    } else if ((col1 === lastCol) && (col2 !== col1 - 1) && (col2 !== lastCol)) {\n      return false;\n    } else if ((row1 === 5) && (row2 !== row1 + 1) && (row2 !== 5)) {\n      return false;\n    } else if ((row1 === lastRow) && (row2 !== row1 - 1) && (row2 !== lastRow)) {\n      return false;\n    } else if ((col2 < col1 - 1) || (col2 > col1 + 1)) {\n      return false;\n    } else if ((row2 < row1 - 1) || (row2 > row1 + 1)) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  moveFruit(fromMove, toMove) {\n    if (this.isValidMove(fromMove, toMove)) {\n        this.swap(fromMove, toMove);\n        setTimeout(() => {\n          if (this.possibleStreak()) {\n            this.findAndRemoveStreaks();\n          } else {\n            this.swap(toMove, fromMove);\n          }\n        }\n       , 500)\n    } else {\n      const fruit1 = this.grid[fromMove[0]][fromMove[1]];\n      const fruit2 = this.grid[toMove[0]][toMove[1]];\n      fruit1.shaking = true;\n      fruit2.shaking = true;\n      setInterval(fruit1.shake(), 500);\n      setInterval(fruit2.shake(), 500);\n    }\n  }\n\n  swap(pos1, pos2) {\n    const c1 = pos1[0], r1 = pos1[1], c2 = pos2[0], r2 = pos2[1];\n    const fruit1 = this.grid[c1][r1];\n    const fruit2 = this.grid[c2][r2];\n    this.grid[c2][r2] = fruit1;\n    this.grid[c1][r1] = fruit2;\n    fruit1.setTempPos([c2, r2], c1, r1);\n    fruit2.setTempPos([c1, r1], c2, r2);\n    fruit1.swapping = true;\n    fruit2.swapping = true;\n  }\n\n  shifting(pos1, pos2) {\n    const c1 = pos1[0], r1 = pos1[1], c2 = pos2[0], r2 = pos2[1];\n    const fruit1 = this.grid[c1][r1];\n    const fruit2 = this.grid[c2][r2];\n    this.grid[c2][r2] = fruit1;\n    this.grid[c1][r1] = fruit2;\n    fruit1.setNewPos([c2, r2], r1);\n    fruit2.setNewPos([c1, r1], r2);\n  }\n\n  possibleStreak() {\n    const vertStreak = this.verticalCheck();\n    const horzStreak = this.horizontalCheck();\n    if (vertStreak || horzStreak) {\n      this.possibleMove = true;\n      return true\n    } else {\n      return false;\n    }\n  }\n\n  findAndRemoveStreaks() {\n    let vertStreak = this.verticalCheck();\n    let horzStreak = this.horizontalCheck();\n\n    while (vertStreak || horzStreak) {\n      if (vertStreak) this.eliminateStreak(vertStreak);\n      if (horzStreak) this.eliminateStreak(horzStreak);\n      vertStreak = this.verticalCheck();\n      horzStreak = this.horizontalCheck();\n    }\n  }\n\n  verticalCheck() {\n    let vertStreak = [];\n\n    for (let i = 0; i < this.grid.length; i++) {\n      debugger\n      for (let j = 5; j < this.grid[0].length; j++) {\n        const streakLength = vertStreak.length;\n        const currFruit = this.grid[i][j];\n        if (streakLength === 0 && currFruit.type !== 'empty') {\n          vertStreak.push([i, j]);\n        } else {\n          const lastPos = vertStreak[streakLength - 1];\n          const lastFruitType = this.grid[lastPos[0]][lastPos[1]].type;\n          if (lastFruitType === currFruit.type) {\n            vertStreak.push([i, j]);\n          } else if (streakLength >= 3) {\n            return vertStreak;\n          } else {\n            vertStreak = [[i, j]];\n          }\n        }\n      }\n\n\n      if (vertStreak.length >= 3) {\n        return vertStreak;\n      } else {\n        vertStreak = [];\n      }\n    }\n  }\n\n  horizontalCheck() {\n    let horzStreak = [];\n    for (let j = 5; j < this.grid[0].length; j++) {\n      for (let i = 0; i < this.grid.length; i++) {\n        const streakLength = horzStreak.length;\n        const currFruit = this.grid[i][j];\n\n        if (streakLength === 0 && currFruit.type !== 'empty') {\n          horzStreak.push([i, j]);\n        } else {\n          const lastPos = horzStreak[streakLength - 1];\n          const lastFruitType = this.grid[lastPos[0]][lastPos[1]].type;\n          if (lastFruitType === currFruit.type) {\n            horzStreak.push([i, j]);\n          } else if (streakLength >= 3) {\n            return horzStreak;\n          } else {\n            horzStreak = [[i, j]];\n          }\n        }\n      }\n\n      if (horzStreak.length >= 3) {\n        return horzStreak;\n      } else {\n        horzStreak = [];\n      }\n    }\n  }\n\n  eliminateStreak(streak) {\n    this.determinePoints(streak);\n\n    for (let i = 0; i < streak.length; i++) {\n      const pos = streak[i]\n      this.grid[pos[0]][pos[1]] = new EmptySpace([pos[0], pos[1]]);\n    }\n\n    this.shift();\n  }\n\n  shift() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = this.grid[i].length - 1; j > 0; j--) {\n\n        const currentFruit = this.grid[i][j];\n\n        if (currentFruit.type === 'empty') {\n          for (let k = j - 1; k >= 0; k--) {\n            const nextFruit = this.grid[i][k];\n            if (nextFruit.type !== 'empty') {\n              this.shifting([i, j], [i, k]);\n              nextFruit.falling = true;\n              k = -1;\n            }\n          }\n        }\n      }\n\n    }\n\n    this.addMoreFruit();\n  }\n\n  addMoreFruit() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j < 5; j++) {\n        if (this.grid[i][j].type === 'empty') {\n          this.grid[i][j] = new Fruit([i, j], true);\n\n        }\n      }\n    }\n  }\n\n  determinePoints(streak) {\n    const firstPos = streak[0];\n    const fruitType = this.grid[firstPos[0]][firstPos[1]].type;\n\n    for (let i = 0; i < streak.length; i++) {\n      if (fruitType === 'carrot') {\n        this.score += 200;\n      } else {\n        this.score += 100;\n      }\n    }\n  }\n\n  draw() {\n    $(\".player-score\").text(`${this.score}`);\n    this.ctx.clearRect(0, 0, this.ctx.height, this.ctx.width);\n    requestAnimationFrame(this.draw);\n\n    let items = [];\n    for(let i = 0; i < this.grid.length; i++) {\n      for(let j = 5; j < this.grid[i].length; j++) {\n        let item = this.grid[i][j];\n        item.draw(this.ctx);\n        items.push(item);\n      }\n    }\n\n    if (items.length === 36) {\n      items.forEach ((item) => {\n        item.move();\n        item.shake();\n      });\n    }\n  }\n}\n\nexport default Board;\n","import Game from \"./game\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n\n  const ctx = canvasEl.getContext(\"2d\");\n  new Game(ctx).start();\n});\n","class EmptySpace {\n  constructor(pos) {\n    this.type = 'empty';\n    this.pos = pos;\n    this.vel = 0;\n    this.falling = false;\n    this.ypos = (pos[1] * 80);\n    this.xpos = (pos[0] * 80);\n  }\n\n  setNewPos(pos) {\n    this.pos[0] = pos[0];\n    this.pos[1] = pos[1];\n    this.xpos = (pos[0] * 80);\n    this.ypos = (pos[1] * 80);\n  }\n\n  createImage() {\n    let img = new Image();\n    img.src = './images/emptyspace.png';\n    img.xpos = this.xpos;\n    img.ypos = this.ypos;\n    return img;\n  }\n\n  draw(ctx) {\n    let image = this.createImage();\n    ctx.clearRect(image.xpos, image.ypos, 80, 80);\n    ctx.drawImage(image, image.xpos, image.ypos, 80, 80);\n  }\n\n  move() {}\n  shake() {}\n}\n\nexport default EmptySpace;\n","const DEFAULT = {\n  TYPE: [\n    \"carrot\",\n    \"blueberry\",\n    \"kiwi\",\n    \"pineapple\",\n    \"strawberry\",\n    \"banana\"]\n}\n\nconst ICONS = {\n  carrot: './images/carrot.png',\n  blueberry: './images/blueberry.png',\n  pineapple: './images/pineapple-icon.png',\n  banana: './images/banana.png',\n  strawberry: './images/strawberry-icon.png',\n  kiwi: './images/kiwi-icon.png'\n}\n\n\nclass Fruit {\n  constructor(pos, falling) {\n    this.type = DEFAULT.TYPE[Math.floor(Math.random() * DEFAULT.TYPE.length)];;\n    this.pos = pos;\n    this.yvel = 0;\n    this.xvel = 0;\n    this.falling = falling;\n    this.shaking = false;\n    this.xpos = pos[0] * 80;\n    this.ypos = (pos[1] - 5) * 80;\n    this.nextYpos = null;\n    this.oldXpos = null;\n    this.oldYpos = null;\n    this.newXpos = null;\n    this.newYpos = null;\n    this.move = this.move.bind(this);\n  }\n\n  setNewPos(pos, oldY) {\n    this.pos = pos;\n    this.nextYpos = ((pos[1] - 5) * 80);\n  }\n\n  setTempPos(pos, oldX, oldY) {\n    this.oldXpos = (oldX * 80);\n    this.oldYpos = ((oldY - 5) * 80);\n    this.newXpos = (pos[0] * 80);\n    this.newYpos = ((pos[1] - 5) * 80);\n  }\n\n  createImage() {\n    let img = new Image();\n    img.src = ICONS[this.type];\n    img.xpos = this.xpos;\n    img.ypos = this.ypos;\n    return img;\n  }\n\n\n  draw(ctx) {\n    let image = this.createImage();\n    ctx.save();\n    ctx.clearRect(image.xpos, image.ypos, 80, 80);\n    ctx.drawImage(image, image.xpos, image.ypos, 80, 80);\n    ctx.restore();\n  }\n\n  move() {\n    this.ypos += this.yvel;\n    this.xpos += this.xvel;\n\n    if (this.falling) {\n      if (this.ypos >= this.nextYpos) {\n        this.falling = false;\n        this.yvel = 0;\n      } else {\n        this.yvel = ((this.nextYpos - this.ypos) / 60) * 10;\n      }\n    } else {\n      this.yvel = 0;\n    }\n\n    if (this.swapping) {\n      if (this.oldXpos > this.newXpos) {\n        this.xvel = -(80 / 60) * 5;\n        this.yvel = 0;\n\n        if(this.xpos <= this.newXpos) {\n          this.xvel = 0;\n          this.swapping = false;\n        }\n      } else if (this.oldXpos < this.newXpos) {\n        this.xvel = (80/60) * 5;\n        this.yvel = 0;\n\n        if(this.xpos >= this.newXpos) {\n          this.xvel = 0;\n          this.swapping = false;\n        }\n      } else {\n        this.xvel = 0;\n      }\n\n      if (this.oldYpos > this.newYpos) {\n        this.yvel = -(80 / 60) * 5;\n        this.xvel = 0;\n\n        if(this.ypos <= this.newYpos) {\n          this.yvel = 0;\n          this.swapping = false;\n        }\n      } else if (this.oldYpos < this.newYpos) {\n        this.yvel = (80/60) * 5;\n        this.xvel = 0;\n\n        if(this.ypos >= this.newYpos) {\n          this.yvel = 0;\n          this.swapping = false;\n        }\n      } else {\n        this.yvel = 0;\n      }\n\n    }\n  }\n\n  shake() {\n    if (this.shaking) {\n      // const delta = Math.floor(Math.random() * 2);\n      // this.ypos += dy;\n      // this.xpos += dx;\n    }\n  }\n}\n\nexport default Fruit;\n","import Board from './board';\n\nclass Game {\n  constructor(ctx) {\n    this.objectiveScore = 2500;\n    this.movesLeft = 5;\n    this.board = new Board(ctx);\n    this.prevMove = null;\n    this.winner = false;\n    this.getMove = this.getMove.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.openRules = this.openRules.bind(this);\n    this.won = this.won.bind(this);\n    this.lost = this.lost.bind(this);\n    this.start = this.start.bind(this);\n\n    $(\"#canvas\").on('click', this.handleMove);\n    $(\".target-score\").text(`Target: ${this.objectiveScore}`);\n    $(\".modal\").on('click', () => $(\".modal\").hide());\n    $('.modal').hide();\n    $(\".rules-cog\").on(\"click\", this.openRules);\n  }\n\n  start() {\n    this.board.draw();\n    this.board.populate();\n    this.movesLeft = 5;\n    this.board.score = 0;\n    $(\".moves-left\").text(`${this.movesLeft}`);\n  }\n\n\n  checkWon() {\n    if (this.movesLeft > 0 && this.board.score >= this.objectiveScore ) {\n      this.winner = true;\n      this.gameOver();\n    } else if (this.movesLeft === 0 && this.board.score < this.objectiveScore) {\n      this.gameOver();\n    } else if (this.movesLeft === 0 && this.board.score === this.objectiveScore) {\n      this.winner = true;\n      this.gameOver();\n    } else {\n      return null;\n    }\n  }\n\n  getMove(e) {\n    if (this.board.possibleMove === 'false') {\n      this.board.populate();\n    }\n\n    let x = e.offsetX;\n    let y = e.offsetY;\n\n    let pos = [];\n    if (x > 0 && x < 80) {\n      pos.push(0)\n    } else if (x >= 80 && x < 160) {\n      pos.push(1);\n    } else if (x >= 160 && x < 240) {\n      pos.push(2);\n    } else if (x >= 240 && x < 320) {\n      pos.push(3);\n    } else if (x >= 320 && x < 400) {\n      pos.push(4);\n    } else {\n      pos.push(5);\n    };\n\n    if (y > 0 && y < 80) {\n      pos.push(5)\n    } else if (y >= 80 && y < 160) {\n      pos.push(6);\n    } else if (y >= 160 && y < 240) {\n      pos.push(7);\n    } else if (y >= 240 && y < 320) {\n      pos.push(8);\n    } else if (y >= 320 && y < 400) {\n      pos.push(9);\n    } else {\n      pos.push(10);\n    };\n\n    return pos;\n  }\n\n  handleMove (e) {\n    if (this.prevMove) {\n      let fromMove = this.prevMove;\n      let toMove = this.getMove(e);\n      this.board.moveFruit(fromMove, toMove);\n      this.movesLeft -= 1;\n      $(\".moves-left\").text(`${this.movesLeft}`);\n\n\n      this.prevMove = false;\n      setTimeout(() => { this.checkWon(); }, 500)\n    } else {\n      this.prevMove = this.getMove(e);\n    }\n  }\n\n  gameOver() {\n    this.movesLeft = 0;\n\n    if (this.winner) {\n      this.won();\n      $(\".modal\").on('click', this.start);\n    } else {\n      this.lost();\n      $(\".modal\").on('click', this.start);\n    }\n  }\n\n  openRules() {\n    $('.modal').show();\n    $(\".modal-rules\").show();\n    $(\".modal-winner\").hide();\n    $(\".modal-loser\").hide();\n  }\n\n  won() {\n    $('.modal').show();\n    $(\".modal-winner\").show();\n    $(\".modal-rules\").hide();\n    $(\".modal-loser\").hide();\n  }\n\n  lost() {\n    $('.modal').show();\n    $(\".modal-loser\").show();\n    $(\".modal-rules\").hide();\n    $(\".modal-winner\").hide();\n  }\n}\n\n\nexport default Game;\n"],"sourceRoot":""}