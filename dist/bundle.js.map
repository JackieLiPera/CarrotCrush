{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/board.js","webpack:///./lib/carrotcrush.js","webpack:///./lib/game.js","webpack:///./lib/game_view.js","webpack:///./lib/veggie.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;AClFA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,mBAAmB,sBAAsB;AACzC,qBAAqB,sBAAsB;AAC3C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC,qBAAqB,sBAAsB;AAC3C;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,sBAAsB;AAC1C,qBAAqB,sBAAsB;AAC3C;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA,qBAAqB,mBAAmB;AACxC;;AAEA;AACA;AACA;AACA;;AAEA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA,KAAK;;AAEL;AACA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;AC/MA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;;;ACRD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA,uCAAuC,oBAAoB;AAC3D,6BAA6B,eAAe;AAC5C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;;;;;;;;;;;;;;;ACtFA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;AChBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/carrotcrush.js\");\n","import Veggie from './veggie';\n\nconst icons = {\n  carrot: './images/carrot.ico',\n  tomato: './images/tomato.png',\n  cucumber: './images/cucumber.png',\n  potato: './images/potato.png',\n  raddish: './images/raddish.png',\n  broccoli: './images/broccoli.png'\n}\n\nclass Board {\n  constructor(ctx) {\n    this.icons = icons;\n    this.ctx = ctx;\n    this.grid = new Array(6);\n      for (let i = 0; i < this.grid.length; i ++) {\n        this.grid[i] = (new Array(6))\n      }\n    this.populate();\n    this.score = 0;\n    this.populate = this.populate.bind(this);\n    this.moveVeggie = this.moveVeggie.bind(this);\n    this.isValidMove = this.isValidMove.bind(this);\n    this.checkForStreaks = this.checkForStreaks.bind(this);\n    this.eliminateStreaks = this.eliminateStreaks.bind(this);\n    this.draw = this.draw.bind(this);\n  }\n\n\n  populate() {\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j < this.grid.length; j++) {\n        this.grid[i][j] = new Veggie();\n      }\n    }\n\n    return this.grid;\n  }\n\n  draw(ctx) {\n    ctx.clearRect(0, 0, 480, 480)\n    let images = [];\n    for(let i = 0; i < this.grid.length; i++) {\n      for(let j = 0; j < this.grid[i].length; j++) {\n        let img = new Image();\n        let veggieType = this.grid[i][j].type;\n        let source =  this.icons[veggieType];\n        img.xpos = (i * 80);\n        img.ypos = (j * 80);\n        img.src = source;\n        images.push(img)\n      }\n    }\n\n    let numImages = 0;\n    images.forEach( (image) => {\n      image.onload = () => {\n        ctx.drawImage(image, image.xpos, image.ypos, 80, 80);\n\n        numImages += 1;\n        if (numImages === 36) {\n          this.checkForStreaks();\n        }\n      }\n    });\n  }\n\n\n  moveVeggie(fromMove, toMove) {\n    if (this.isValidMove(fromMove, toMove) === true) {\n      let firstVeg = this.grid[fromMove[0]][fromMove[1]];\n      let secondVeg = this.grid[toMove[0]][toMove[1]];\n\n      this.grid[toMove[0]][toMove[1]] = firstVeg;\n      this.grid[fromMove[0]][fromMove[1]] = secondVeg;\n      this.draw(this.ctx);\n    } else {\n      alert('Invalid move') // change this - create a shake animation?\n    }\n  }\n\n  isValidMove(fromMove, toMove) {\n    let xPos1 = fromMove[0];\n    let xPos2 = toMove[0];\n    let yPos1 = fromMove[1];\n    let yPos2 = toMove[1];\n\n    if ((xPos1 === 0) && (xPos2 !== 0 && xPos2 !== 1)) {\n      return false;\n    } else if ((xPos1 === this.grid.length) && (xPos2 !== xPos1 - 1) && (xPos2 !== this.grid.length)) {\n      return false;\n    } else if ((yPos1 === 0) && (yPos2 !== yPos1 + 1) && (yPos2 !== 0)) {\n      return false;\n    } else if ((yPos1 === this.grid.length) && (yPos2 !== yPos1 - 1) && (yPos2 !== this.grid.length)) {\n      return false;\n    } else if ((xPos2 < (xPos1 - 1)) || (xPos2 > xPos1 + 1)) {\n      return false;\n    } else if ((yPos2 < yPos1 - 1) || (yPos2 > yPos1 + 1)) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  checkForStreaks() {\n    let currentStreak = [];\n    let horizontalStreaks = [];\n    let verticalStreaks = [];\n    let score = 0;\n\n    //horizontal check\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 1; j < this.grid.length; j++) {\n        let checked = false;\n\n\n        if (currentStreak.length === 0) {\n          currentStreak.push([(j - 1), i]);\n        }\n\n        if (j === this.grid.length - 1) {\n          checked = true;\n        } else if (this.grid[j][i].type === this.grid[(j - 1)][i].type) {\n          currentStreak.push([j, i])\n        } else {\n          if (this.grid[j][i].type !== this.grid[(j - 1)][i].type) {\n            if (currentStreak.length >= 3) {\n              horizontalStreaks.push(currentStreak);\n            }\n\n            currentStreak = [];\n            checked = false;\n          }\n        }\n\n        if (checked) {\n          currentStreak = [];\n          score += (horizontalStreaks.length * 50);\n          debugger\n          this.eliminateStreaks(horizontalStreaks);\n        }\n      }\n    }\n\n    //vertical check\n    for (let i = 0 ; i < this.grid.length; i++) {\n      for (let j = 1; j < this.grid.length; j++) {\n        let checked = false;\n\n        if (currentStreak.length === 0) {\n          currentStreak.push([i, (j - 1)]);\n        }\n\n        if (j === this.grid.length - 1) {\n          checked = true;\n        } else if (this.grid[i][j].type === this.grid[i][(j - 1)].type){\n          currentStreak.push([i, j]);\n        } else {\n          if (this.grid[i][j].type !== this.grid[i][(j - 1)].type) {\n            if (currentStreak.length >= 3) {\n              verticalStreaks.push(currentStreak);\n            }\n\n            currentStreak = [];\n            checked = false;\n          }\n        }\n\n        if (checked) {\n          currentStreak = [];\n          score += (verticalStreaks.length * 50);\n          this.eliminateStreaks(verticalStreaks);\n        }\n      }\n    }\n  }\n\n\n  eliminateStreaks(streaks) {\n    if (streaks.length === 0){\n      return null;\n    }\n\n\n    streaks.forEach ((streak) => {\n      for (let i = 0; i < streak.length; i++) {\n        let row = streak[i]\n\n        this.grid[row[0]].splice(row[1], 1);\n        this.grid[row[0]].unshift(null);\n        // at this position - plug in an empty space class object\n      }\n\n      for (let i = 0; i < streak.length; i++) {\n        let row = streak[i]\n        this.grid[row[0]][0] = (new Veggie());\n      }\n    });\n\n    this.checkForStreaks();\n  }\n\n\n}\n\n\nexport default Board;\n","import Game from \"./game\";\nimport GameView from './game_view';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n\n  const ctx = canvasEl.getContext(\"2d\");\n  new GameView(ctx).start();\n});\n","import Board from './board';\n\n\nclass Game {\n  constructor(board) {\n    this.score = 0;\n    this.objectiveScore = 1000;\n    this.movesLeft = 10;\n    this.board = board;\n    this.won = false;\n    this.prevMove = null;\n\n    this.play = this.play.bind(this);\n    this.getMove = this.getMove.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.winner = this.winner.bind(this);\n\n\n    $(\"#canvas\").on('click', this.handleMove);\n    $(\".player-score\").text(this.score);\n    $(\".target-score\").text(`Target: ${this.objectiveScore}`);\n    $(\".moves-left\").text(`${this.movesLeft}`);\n  }\n\n  play() {\n    while (this.won === false) {\n      this.won = true;\n    }\n\n    this.winner();\n  }\n\n  getMove(e) {\n    let y = e.offsetX;\n    let x = e.offsetY;\n\n    let pos = [];\n    if (y > 0 && y < 80) {\n      pos.push(0)\n    } else if (y >= 80 && y < 160) {\n      pos.push(1);\n    } else if (y >= 160 && y < 240) {\n      pos.push(2);\n    } else if (y >= 240 && y < 320) {\n      pos.push(3);\n    } else if (y >= 320 && y < 400) {\n      pos.push(4);\n    } else {\n      pos.push(5);\n    };\n\n    if (x > 0 && x < 80) {\n      pos.push(0)\n    } else if (x >= 80 && x < 160) {\n      pos.push(1);\n    } else if (x >= 160 && x < 240) {\n      pos.push(2);\n    } else if (x >= 240 && x < 320) {\n      pos.push(3);\n    } else if (x >= 320 && x < 400) {\n      pos.push(4);\n    } else {\n      pos.push(5);\n    };\n\n    return pos;\n  }\n\n  handleMove (e) {\n    if (this.prevMove) {\n      let fromMove = this.prevMove;\n      let toMove = this.getMove(e);\n      this.board.moveVeggie(fromMove, toMove);\n      this.prevMove = false;\n    } else {\n      this.prevMove = this.getMove(e);\n    }\n  }\n\n  winner() {\n    console.log('You won');\n  }\n\n}\n\n\nexport default Game;\n","import Board from './board';\nimport Game from './game';\n\nclass GameView {\n  constructor(ctx) {\n    this.ctx = ctx;\n    this.board = new Board(ctx);\n    this.game = new Game(this.board);\n  }\n\n  start() {\n    this.board.draw(this.ctx);\n    this.game.play();\n  }\n}\n\nexport default GameView;\n","const DEFAULT = {\n  TYPE: [\n    \"carrot\",\n    \"tomato\",\n    \"broccoli\",\n    \"cucumber\",\n    \"raddish\",\n    \"potato\"]\n}\n\nclass Veggie {\n  constructor() {\n    this.type = DEFAULT.TYPE[Math.floor(Math.random() * DEFAULT.TYPE.length)];\n  }\n}\n\nexport default Veggie;\n"],"sourceRoot":""}